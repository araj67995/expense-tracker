<script src="app.js"></script>
<script>
  // Loading Animation
  function initLoader() {
    const loader = document.getElementById('loader');
    
    // Simulating loading time
    setTimeout(() => {
      loader.style.opacity = '0';
      setTimeout(() => {
        loader.style.display = 'none';
      }, 500);
    }, 3000);
  }
  
  // Money Rain Animation
  const moneyRain = document.getElementById('money-rain');
  const coinCount = 15; // Regular coins
  const goldenCoinCount = 5; // Special golden coins
  
  // Create falling coins
  function createCoins() {
    // Clear existing coins
    moneyRain.innerHTML = '';
    
    // Create regular coins
    for (let i = 0; i < coinCount; i++) {
      const coin = document.createElement('div');
      coin.classList.add('coin');
      
      // Random position and animation duration
      const left = Math.random() * 100;
      const animationDuration = Math.random() * 10 + 5; // 5-15 seconds
      const delay = Math.random() * 5; // 0-5 seconds delay
      
      coin.style.left = `${left}%`;
      coin.style.animationDuration = `${animationDuration}s`;
      coin.style.animationDelay = `${delay}s`;
      
      moneyRain.appendChild(coin);
    }
    
    // Create golden coins
    for (let i = 0; i < goldenCoinCount; i++) {
      const coin = document.createElement('div');
      coin.classList.add('coin', 'golden');
      
      // Random position and animation duration
      const left = Math.random() * 100;
      const animationDuration = Math.random() * 8 + 8; // 8-16 seconds
      const delay = Math.random() * 8; // 0-8 seconds delay
      
      coin.style.left = `${left}%`;
      coin.style.animationDuration = `${animationDuration}s`;
      coin.style.animationDelay = `${delay}s`;
      
      moneyRain.appendChild(coin);
    }
  }
  
  // Add progress animation
  function initProgressRings() {
    const progressRings = document.querySelectorAll('.progress-ring-fill');
    const progressTexts = document.querySelectorAll('.progress-text');
    
    progressRings.forEach((ring, index) => {
      const text = progressTexts[index];
      const percentage = text.textContent ? parseInt(text.textContent) / 100 : 0.2;
      
      // Set CSS variable for animation
      ring.style.setProperty('--percentage', percentage);
      
      // Add percentage text if empty
      if (!text.textContent) {
        text.textContent = Math.round(percentage * 100) + '%';
      }
      
      // Add data-refresh animation when hovered
      const container = ring.closest('.progress-container');
      container.addEventListener('mouseenter', () => {
        ring.classList.add('data-refresh');
        text.classList.add('data-refresh');
        
        setTimeout(() => {
          ring.classList.remove('data-refresh');
          text.classList.remove('data-refresh');
        }, 500);
      });
    });
  }

  // Month Display Enhancement
  function enhanceMonthDisplay() {
    const monthDisplay = document.querySelector('.month-display');
    const monthInput = document.querySelector('.month-input');
    const monthIcons = document.querySelectorAll('.month-icons i');
    
    // Set default month to current month
    const today = new Date();
    const year = today.getFullYear();
    const month = String(today.getMonth() + 1).padStart(2, '0');
    monthInput.value = `${year}-${month}`;
    
    // Add shimmer effect on hover
    monthDisplay.addEventListener('mouseenter', () => {
      const shimmer = document.querySelector('.shimmer');
      if (shimmer) {
        shimmer.style.animation = 'shimmerEffect 1.5s ease-in-out';
        
        // Reset animation after completion
        setTimeout(() => {
          shimmer.style.animation = '';
        }, 1500);
      }
    });
    
    // Add click effects to icons
    monthIcons.forEach(icon => {
      icon.addEventListener('click', () => {
        // Add pulse effect
        icon.classList.add('icon-clicked');
        
        // Show tooltip based on icon
        let message = '';
        if (icon.classList.contains('fa-chart-line')) {
          message = 'View monthly expense trends';
        } else if (icon.classList.contains('fa-coins')) {
          message = 'View savings overview';
        } else if (icon.classList.contains('fa-money-bill-wave')) {
          message = 'View spending breakdown';
        }
        
        // Create and show tooltip
        const tooltip = document.createElement('div');
        tooltip.classList.add('month-tooltip');
        tooltip.textContent = message;
        monthDisplay.appendChild(tooltip);
        
        // Remove tooltip after delay
        setTimeout(() => {
          tooltip.remove();
          icon.classList.remove('icon-clicked');
        }, 2000);
      });
    });
    
    // Month change event
    monthInput.addEventListener('change', () => {
      // Add highlight animation to month display
      monthDisplay.classList.add('month-changed');
      
      // Remove highlight after animation completes
      setTimeout(() => {
        monthDisplay.classList.remove('month-changed');
      }, 1000);
      
      // Here you would update your dashboard data based on selected month
      console.log('Month changed to:', monthInput.value);
    });
  }
  
  // Scroll Animation Handler
  function handleScrollAnimations() {
    const scrollElements = document.querySelectorAll('.scroll-animate');
    
    const elementInView = (el, percentageScroll = 100) => {
      const elementTop = el.getBoundingClientRect().top;
      return (
        elementTop <= 
        ((window.innerHeight || document.documentElement.clientHeight) * (percentageScroll/100))
      );
    };
    
    const displayScrollElement = (element) => {
      element.classList.add('in-view');
    };
    
    const hideScrollElement = (element) => {
      element.classList.remove('in-view');
    };
    
    const handleScrollAnimation = () => {
      scrollElements.forEach((el) => {
        if (elementInView(el, 90)) {
          displayScrollElement(el);
        } else {
          hideScrollElement(el);
        }
      });
    };
    
    // Initialize elements already in view
    handleScrollAnimation();
    
    // Add scroll event
    window.addEventListener('scroll', () => {
      handleScrollAnimation();
    });
  }
  
  // Flying Money Animation
  function initFlyingMoney() {
    const container = document.getElementById('flying-money-container');
    const buttons = document.querySelectorAll('.btn');
    
    buttons.forEach(button => {
      button.addEventListener('click', (e) => {
        // Prevent default form submission
        if (button.type === 'submit') {
          e.preventDefault();
          
          // Form will be submitted after animation completes
          setTimeout(() => {
            const form = button.closest('form');
            if (form) {
              // form.submit();
              console.log('Form submitted');
            }
          }, 1000);
        }
        
        // Create 5 flying money elements
        for (let i = 0; i < 5; i++) {
          const money = document.createElement('div');
          money.classList.add('flying-money');
          
          // Get button position
          const buttonRect = button.getBoundingClientRect();
          const startX = buttonRect.left + buttonRect.width / 2;
          const startY = buttonRect.top + buttonRect.height / 2;
          
          // Set start position
          money.style.left = `${startX}px`;
          money.style.top = `${startY}px`;
          
          // Set random end position
          const endX = (Math.random() - 0.5) * 200;
          const endY = -100 - Math.random() * 100;
          money.style.setProperty('--end-x', `${endX}px`);
          money.style.setProperty('--end-y', `${endY}px`);
          
          // Add to container
          container.appendChild(money);
          
          // Start animation
          setTimeout(() => {
            money.classList.add('active');
            
            // Remove after animation completes
            setTimeout(() => {
              container.removeChild(money);
            }, 1000);
          }, i * 50);
        }
      });
    });
  }
  
  // Delete Button Animation
  function initDeleteButtons() {
    const deleteButtons = document.querySelectorAll('.delete-btn');
    
    deleteButtons.forEach(button => {
      button.addEventListener('click', () => {
        const item = button.closest('.expense-list, .profile-list');
        
        // Add fade out animation
        item.style.transition = 'all 0.5s ease';
        item.style.opacity = '0';
        item.style.transform = 'scale(0.8) translateY(20px)';
        
        // Remove after animation
        setTimeout(() => {
          if (item.parentNode) {
            item.parentNode.removeChild(item);
          }
        }, 500);
      });
    });
  }
  
  // Initialize
  document.addEventListener('DOMContentLoaded', () => {
    initLoader();
    createCoins();
    initProgressRings();
    enhanceMonthDisplay();
    handleScrollAnimations();
    initFlyingMoney();
    initDeleteButtons();
  });
</script>
</body>
</html>
